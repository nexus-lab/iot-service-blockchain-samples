#!/usr/bin/env bash

set -eu
set -o pipefail

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. ${SCRIPT_DIR}/setenv
. ${SCRIPT_DIR}/utils

# private variables
__MY_MSP_DIR__=${FABRIC_CA_CLIENT_HOME}/msp
__MY_TLS_DIR_VAR__=X_$(uppercase ${X_FABRIC_ORG})_TLS_DIR
__MY_TLS_DIR__=${!__MY_TLS_DIR_VAR__}
__MSP_FILES__="config.yaml cacerts/ tlscacerts/"
__TLS_FILES__="ca.crt server.crt"

function register_and_enroll_user {
  local type=$1
  local user=$2
  local host=${3:-""}
  local mspdir="${FABRIC_CA_CLIENT_HOME}/users/${user}/msp"

  log_info "ðŸ‘‰ Creating user ${X_FABRIC_ORG}.${user}..."

  mkdir -p ${mspdir}

  fabric-ca-client register \
      --caname ca-${X_FABRIC_ORG} \
      --id.name ${user} \
      --id.secret ${user}pw \
      --id.type ${type} \
      --tls.certfiles "${FABRIC_CA_SERVER_HOME}/tls-cert.pem"

  if [[ -z $host ]]; then
    fabric-ca-client enroll \
        --url https://${user}:${user}pw@localhost:7054 \
        --caname ca-${X_FABRIC_ORG} \
        --tls.certfiles "${FABRIC_CA_SERVER_HOME}/tls-cert.pem" \
        --mspdir ${mspdir}
  else
    fabric-ca-client enroll \
        --url https://${user}:${user}pw@localhost:7054 \
        --caname ca-${X_FABRIC_ORG} \
        --csr.hosts ${host} \
        --csr.hosts localhost \
        --tls.certfiles "${FABRIC_CA_SERVER_HOME}/tls-cert.pem" \
        --mspdir ${mspdir}
  fi

  cp $(pwd)/msp/config.yaml ${mspdir}/config.yaml
}

function register_and_enroll_user_tls {
  local type=$1
  local user=$2
  local host=$3
  local mspdir="${FABRIC_CA_CLIENT_HOME}/users/${user}/msp"
  local tlsdir="${FABRIC_CA_CLIENT_HOME}/users/${user}/tls"

  register_and_enroll_user ${type} ${user} ${host}

  log_info "ðŸ‘‰ Creating TLS certificates for user ${X_FABRIC_ORG}.${user}..."

  mkdir -p ${tlsdir}

  fabric-ca-client enroll \
      --url https://${user}:${user}pw@localhost:7054 \
      --caname ca-${X_FABRIC_ORG} \
      --enrollment.profile tls \
      --csr.hosts ${host} \
      --csr.hosts localhost \
      --tls.certfiles "${FABRIC_CA_SERVER_HOME}/tls-cert.pem" \
      --mspdir ${tlsdir}
  
  cp ${tlsdir}/tlscacerts/* ${tlsdir}/ca.crt
  cp ${tlsdir}/signcerts/* ${tlsdir}/server.crt
  cp ${tlsdir}/keystore/* ${tlsdir}/server.key

  mkdir -p ${mspdir}/tlscacerts
  cp ${tlsdir}/tlscacerts/* ${mspdir}/tlscacerts/ca.crt
  
  mkdir -p ${__MY_MSP_DIR__}/tlscacerts
  cp ${tlsdir}/tlscacerts/* ${__MY_MSP_DIR__}/tlscacerts/ca.crt
}

function prompt_copy_msp_and_tls_files {
  log_info "ðŸ‘‰ Copy the following MSP and TLS files/directories to the same location on other machines:"

  for f in ${__MSP_FILES__}; do
    log_info "   - ${__MY_MSP_DIR__}/${f}"
  done

  for f in ${__TLS_FILES__}; do
    log_info "   - ${__MY_TLS_DIR__}/${f}"
  done

  read -p "Press [Enter] when done..." </dev/tty
}

function wait_msp_and_tls_files {
  for org in orderer org1 org2; do
    log_info "ðŸ‘‰ Waiting for MSP and TLS/directories files from ${org}..."

    local mspdir_var=X_$(uppercase ${org})_MSP_DIR
    local tlsdir_var=X_$(uppercase ${org})_TLS_DIR
    local mspdir=${!mspdir_var}
    local tlsdir=${!tlsdir_var}

    mkdir -p ${mspdir}
    mkdir -p ${tlsdir}

    while true; do
      local found=1
      
      for f in ${__MSP_FILES__}; do
        if [[ ! -f "${mspdir}/$f" && ! -d "${mspdir}/$f" ]]; then
          found=0
          break
        fi
      done
      
      for f in ${__TLS_FILES__}; do
        if [[ ! -f "${tlsdir}/$f" && ! -d "${tlsdir}/$f" ]]; then
          found=0
          break
        fi
      done
      
      if [[ ${found} -eq 1 ]]; then
        break
      fi

      sleep 1
    done
  done
}
