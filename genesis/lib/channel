#!/usr/bin/env bash

set -eu
set -o pipefail

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. ${SCRIPT_DIR}/setenv
. ${SCRIPT_DIR}/utils

# private variables
__FABRIC_GENESIS_HOME__=/var/hyperledger/fabric/genesis

function create_genesis_block {
  log_info "ðŸ‘‰ Creating channel genesis block for ${X_FABRIC_CHANNEL}..."

  configtxgen -profile TwoOrgsApplicationGenesis \
    -outputBlock ${__FABRIC_GENESIS_HOME__}/${X_FABRIC_CHANNEL}.block \
    -channelID ${X_FABRIC_CHANNEL}
}


function prompt_copy_genesis_block {
  log_info "ðŸ‘‰ Copy the following channel genesis block to the same location on other peers:"
  log_info "   - ${__FABRIC_GENESIS_HOME__}/${X_FABRIC_CHANNEL}.block"

  read -p "Press [Enter] when done..." </dev/tty
}

function wait_genesis_block {
  log_info "ðŸ‘‰ Waiting for channel genesis block from orderer..."

  mkdir -p ${__FABRIC_GENESIS_HOME__}

  while true; do
    if [[ -f "${__FABRIC_GENESIS_HOME__}/${X_FABRIC_CHANNEL}.block" ]]; then
      break
    fi

    sleep 1
  done
}

function create_channel {
  log_info "ðŸ‘‰ Creating channel ${X_FABRIC_CHANNEL}..."

  osnadmin channel join \
      --orderer-address ${X_ORDERER_HOST}:7051 \
      --channelID ${X_FABRIC_CHANNEL} \
      --config-block ${__FABRIC_GENESIS_HOME__}/${X_FABRIC_CHANNEL}.block \
      --ca-file ${X_ORDERER_TLS_DIR}/ca.crt \
      --client-cert ${X_ORDERER_TLS_DIR}/server.crt \
      --client-key ${X_ORDERER_TLS_DIR}/server.key
}

function join_channel {
  log_info "ðŸ‘‰ Joining channel ${X_FABRIC_CHANNEL}..."

  peer channel join --blockpath ${__FABRIC_GENESIS_HOME__}/${X_FABRIC_CHANNEL}.block
}

function fetch_channel_config {
  local output=$1
  local tmp_pb=$(mktemp)
  local tmp_json=$(mktemp)

  peer channel fetch config ${tmp_pb} \
    --tls \
    --cafile ${X_ORDERER_TLS_DIR}/ca.crt \
    --orderer ${X_ORDERER_HOST}:7050 \
    --ordererTLSHostnameOverride ${X_ORDERER_HOST} \
    --channelID ${X_FABRIC_CHANNEL}

  configtxlator proto_decode --input ${tmp_pb} --type common.Block --output ${tmp_json}

  jq .data.data[0].payload.data.config ${tmp_json} > ${output}

  rm -rf ${tmp_pb} ${tmp_json}
}

function create_config_update {
  local source=$1
  local patch=$2
  local output=$3
  
  local tmp_source_pb=$(mktemp)
  local tmp_patch_pb=$(mktemp)
  local tmp_update_pb=$(mktemp)
  local tmp_update_json=$(mktemp)
  local tmp_envelope_json=$(mktemp)

  configtxlator proto_encode \
      --input "${source}" \
      --type common.Config \
      --output ${tmp_source_pb}

  configtxlator proto_encode \
      --input "${patch}" \
      --type common.Config \
      --output ${tmp_patch_pb}

  configtxlator compute_update \
      --channel_id "${X_FABRIC_CHANNEL}" \
      --original ${tmp_source_pb} \
      --updated ${tmp_patch_pb} \
      --output ${tmp_update_pb}

  configtxlator proto_decode \
      --input ${tmp_update_pb} \
      --type common.ConfigUpdate \
      --output ${tmp_update_json}

  cat <<EOF | jq . > ${tmp_envelope_json}
{
  "payload": {
    "header": {
      "channel_header": {
        "channel_id": "${X_FABRIC_CHANNEL}",
        "type": 2
      }
    },
    "data": {
      "config_update": $(cat ${tmp_update_json})
    }
  }
}
EOF

  configtxlator proto_encode \
      --input ${tmp_envelope_json} \
      --type common.Envelope \
      --output ${output}

  rm -rf ${tmp_source_pb} ${tmp_patch_pb} ${tmp_update_pb} ${tmp_update_json} ${tmp_envelope_json}
}

function set_anchor_peer {
  log_info "ðŸ‘‰ Set channel ${X_FABRIC_CHANNEL} anchor peer peer0.${X_FABRIC_ORG}.example.com..."

  local source=$(mktemp)
  local patch=$(mktemp)
  local update=$(mktemp)

  fetch_channel_config ${source}

  local diff=$(cat <<EOF | jq -c .
{
  "AnchorPeers": {
    "mod_policy": "Admins",
    "value": {
      "anchor_peers": [
        {
          "host": "peer0.${X_FABRIC_ORG}.example.com",
          "port": 7051
        }
      ]
    },
    "version": "0"
  }
}
EOF
)

  jq '.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values += '${diff} \
      ${source} > ${patch}

  create_config_update ${source} ${patch} ${update}

  peer channel update \
      --tls \
      --cafile ${X_ORDERER_TLS_DIR}/ca.crt \
      --orderer ${X_ORDERER_HOST}:7050 \
      --ordererTLSHostnameOverride ${X_ORDERER_HOST} \
      --channelID ${X_FABRIC_CHANNEL} \
      --file ${update}

  rm -rf ${source} ${patch} ${update}
}
